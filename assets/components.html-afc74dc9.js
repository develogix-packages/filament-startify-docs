import{_ as n,o as a,c as s,e as t}from"./app-a94f4892.js";const p={},e=t(`<h1 id="extending-and-overriding-components" tabindex="-1"><a class="header-anchor" href="#extending-and-overriding-components" aria-hidden="true">#</a> Extending and Overriding Components</h1><p>All pages within the auth flow are Livewire components made to work with Filament Forms. So you can easily extend any component to add your own fields and actions.</p><p>You can instruct Startify to use any custom components by updating the paths in the <code>filament-startify.php</code> config file:</p><div class="language-php" data-ext="php"><pre class="language-php"><code><span class="token comment">/*
|--------------------------------------------------------------------------
| Path to registration Livewire component.
|--------------------------------------------------------------------------
|
| Here you can define custom components such as a new profile component.
|
*/</span>

<span class="token string single-quoted-string">&#39;components&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;registration_path&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Livewire<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>Register</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;password_reset_path&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Livewire<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>ResetPassword</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;email_verification_path&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Livewire<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>Verify</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;email_verification_controller_path&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>EmailVerificationController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;lockscreen_path&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Livewire<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>LockScreen</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;passkey_create_path&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Livewire<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>PasskeyCreate</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;profile_page_path&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Pages<span class="token punctuation">\\</span>MyProfile</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre></div><p><em>NOTE:</em> Remember, the Login path is set in the Filament config, not in the <code>filament-startify.php</code> config.</p><p>Here is an example of extending the StartifyRegister class to add new fields to registration:</p><div class="language-php" data-ext="php"><pre class="language-php"><code>
<span class="token keyword">use</span> <span class="token package">DevelogixPackages<span class="token punctuation">\\</span>FilamentStartify<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Livewire<span class="token punctuation">\\</span>Auth<span class="token punctuation">\\</span>Register</span> <span class="token keyword">as</span> FilamentStartifyRegister<span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name-definition class-name">Register</span> <span class="token keyword">extends</span> <span class="token class-name">FilamentStartifyRegister</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Define the new attributes</span>
    <span class="token keyword">public</span> <span class="token variable">$team_name</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Override the getFormSchema method and merge the default fields then add your own.</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getFormSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">getFormSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>
            <span class="token class-name class-name-fully-qualified static-context">Forms<span class="token punctuation">\\</span>Components<span class="token punctuation">\\</span>TextInput</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;team_name&quot;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// Use this method to modify the preparedData before the register() method is called.</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">prepareModelData</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$preparedData</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">prepareModelData</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$preparedData</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;team_name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">team_name</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$preparedData</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// Optionally, you can override the entire register() method to customize exactly what happens at registration</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$preparedData</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">prepareModelData</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">form</span><span class="token operator">-&gt;</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$team</span> <span class="token operator">=</span> <span class="token class-name static-context">Team</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;name&quot;</span> <span class="token operator">=&gt;</span> <span class="token variable">$preparedData</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;team_name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$preparedData</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;team_name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre></div>`,7),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","components.html.vue"]]);export{r as default};
